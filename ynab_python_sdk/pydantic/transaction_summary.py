# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

    The version of the OpenAPI document: 1.68.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from ynab_python_sdk.pydantic.transaction_cleared_status import TransactionClearedStatus
from ynab_python_sdk.pydantic.transaction_flag_color import TransactionFlagColor
from ynab_python_sdk.pydantic.transaction_flag_name import TransactionFlagName

class TransactionSummary(BaseModel):
    id: str = Field(alias='id')

    # The transaction date in ISO format (e.g. 2016-12-01)
    date: date = Field(alias='date')

    # The transaction amount in milliunits format
    amount: int = Field(alias='amount')

    cleared: TransactionClearedStatus = Field(alias='cleared')

    # Whether or not the transaction is approved
    approved: bool = Field(alias='approved')

    account_id: str = Field(alias='account_id')

    # Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
    deleted: bool = Field(alias='deleted')

    memo: typing.Optional[typing.Optional[str]] = Field(None, alias='memo')

    flag_color: typing.Optional[TransactionFlagColor] = Field(None, alias='flag_color')

    flag_name: typing.Optional[TransactionFlagName] = Field(None, alias='flag_name')

    payee_id: typing.Optional[typing.Optional[str]] = Field(None, alias='payee_id')

    category_id: typing.Optional[typing.Optional[str]] = Field(None, alias='category_id')

    # If a transfer transaction, the account to which it transfers
    transfer_account_id: typing.Optional[typing.Optional[str]] = Field(None, alias='transfer_account_id')

    # If a transfer transaction, the id of transaction on the other side of the transfer
    transfer_transaction_id: typing.Optional[typing.Optional[str]] = Field(None, alias='transfer_transaction_id')

    # If transaction is matched, the id of the matched transaction
    matched_transaction_id: typing.Optional[typing.Optional[str]] = Field(None, alias='matched_transaction_id')

    # If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
    import_id: typing.Optional[typing.Optional[str]] = Field(None, alias='import_id')

    # If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
    import_payee_name: typing.Optional[typing.Optional[str]] = Field(None, alias='import_payee_name')

    # If the transaction was imported, the original payee name as it appeared on the statement
    import_payee_name_original: typing.Optional[typing.Optional[str]] = Field(None, alias='import_payee_name_original')

    # If the transaction is a debt/loan account transaction, the type of transaction
    debt_transaction_type: typing.Optional[Literal["payment", "refund", "fee", "interest", "escrow", "balanceAdjustment", "credit", "charge", None]] = Field(None, alias='debt_transaction_type')
    class Config:
        arbitrary_types_allowed = True
