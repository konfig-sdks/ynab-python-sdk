# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

    The version of the OpenAPI document: 1.68.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ynab_python_sdk import schemas  # noqa: F401


class ScheduledTransactionSummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "amount",
            "account_id",
            "date_next",
            "deleted",
            "date_first",
            "id",
            "frequency",
        }
        
        class properties:
            id = schemas.UUIDSchema
            date_first = schemas.DateSchema
            date_next = schemas.DateSchema
            
            
            class frequency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NEVER(cls):
                    return cls("never")
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("daily")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("weekly")
                
                @schemas.classproperty
                def EVERY_OTHER_WEEK(cls):
                    return cls("everyOtherWeek")
                
                @schemas.classproperty
                def TWICE_AMONTH(cls):
                    return cls("twiceAMonth")
                
                @schemas.classproperty
                def EVERY4WEEKS(cls):
                    return cls("every4Weeks")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("monthly")
                
                @schemas.classproperty
                def EVERY_OTHER_MONTH(cls):
                    return cls("everyOtherMonth")
                
                @schemas.classproperty
                def EVERY3MONTHS(cls):
                    return cls("every3Months")
                
                @schemas.classproperty
                def EVERY4MONTHS(cls):
                    return cls("every4Months")
                
                @schemas.classproperty
                def TWICE_AYEAR(cls):
                    return cls("twiceAYear")
                
                @schemas.classproperty
                def YEARLY(cls):
                    return cls("yearly")
                
                @schemas.classproperty
                def EVERY_OTHER_YEAR(cls):
                    return cls("everyOtherYear")
            amount = schemas.Int64Schema
            account_id = schemas.UUIDSchema
            deleted = schemas.BoolSchema
            
            
            class memo(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'memo':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def flag_color() -> typing.Type['TransactionFlagColor']:
                return TransactionFlagColor
        
            @staticmethod
            def flag_name() -> typing.Type['TransactionFlagName']:
                return TransactionFlagName
            
            
            class payee_id(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payee_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class category_id(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class transfer_account_id(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transfer_account_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "date_first": date_first,
                "date_next": date_next,
                "frequency": frequency,
                "amount": amount,
                "account_id": account_id,
                "deleted": deleted,
                "memo": memo,
                "flag_color": flag_color,
                "flag_name": flag_name,
                "payee_id": payee_id,
                "category_id": category_id,
                "transfer_account_id": transfer_account_id,
            }
    
    amount: MetaOapg.properties.amount
    account_id: MetaOapg.properties.account_id
    date_next: MetaOapg.properties.date_next
    deleted: MetaOapg.properties.deleted
    date_first: MetaOapg.properties.date_first
    id: MetaOapg.properties.id
    frequency: MetaOapg.properties.frequency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_first"]) -> MetaOapg.properties.date_first: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_next"]) -> MetaOapg.properties.date_next: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag_color"]) -> 'TransactionFlagColor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag_name"]) -> 'TransactionFlagName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payee_id"]) -> MetaOapg.properties.payee_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transfer_account_id"]) -> MetaOapg.properties.transfer_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "date_first", "date_next", "frequency", "amount", "account_id", "deleted", "memo", "flag_color", "flag_name", "payee_id", "category_id", "transfer_account_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_first"]) -> MetaOapg.properties.date_first: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_next"]) -> MetaOapg.properties.date_next: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag_color"]) -> typing.Union['TransactionFlagColor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag_name"]) -> typing.Union['TransactionFlagName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payee_id"]) -> typing.Union[MetaOapg.properties.payee_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> typing.Union[MetaOapg.properties.category_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transfer_account_id"]) -> typing.Union[MetaOapg.properties.transfer_account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "date_first", "date_next", "frequency", "amount", "account_id", "deleted", "memo", "flag_color", "flag_name", "payee_id", "category_id", "transfer_account_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, uuid.UUID, ],
        date_next: typing.Union[MetaOapg.properties.date_next, str, date, ],
        deleted: typing.Union[MetaOapg.properties.deleted, bool, ],
        date_first: typing.Union[MetaOapg.properties.date_first, str, date, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        frequency: typing.Union[MetaOapg.properties.frequency, str, ],
        memo: typing.Union[MetaOapg.properties.memo, None, str, schemas.Unset] = schemas.unset,
        flag_color: typing.Union['TransactionFlagColor', schemas.Unset] = schemas.unset,
        flag_name: typing.Union['TransactionFlagName', schemas.Unset] = schemas.unset,
        payee_id: typing.Union[MetaOapg.properties.payee_id, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        category_id: typing.Union[MetaOapg.properties.category_id, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        transfer_account_id: typing.Union[MetaOapg.properties.transfer_account_id, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ScheduledTransactionSummary':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            account_id=account_id,
            date_next=date_next,
            deleted=deleted,
            date_first=date_first,
            id=id,
            frequency=frequency,
            memo=memo,
            flag_color=flag_color,
            flag_name=flag_name,
            payee_id=payee_id,
            category_id=category_id,
            transfer_account_id=transfer_account_id,
            _configuration=_configuration,
            **kwargs,
        )

from ynab_python_sdk.model.transaction_flag_color import TransactionFlagColor
from ynab_python_sdk.model.transaction_flag_name import TransactionFlagName
