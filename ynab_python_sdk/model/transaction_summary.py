# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

    The version of the OpenAPI document: 1.68.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ynab_python_sdk import schemas  # noqa: F401


class TransactionSummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date",
            "amount",
            "approved",
            "account_id",
            "deleted",
            "id",
            "cleared",
        }
        
        class properties:
            id = schemas.StrSchema
            date = schemas.DateSchema
            amount = schemas.Int64Schema
        
            @staticmethod
            def cleared() -> typing.Type['TransactionClearedStatus']:
                return TransactionClearedStatus
            approved = schemas.BoolSchema
            account_id = schemas.UUIDSchema
            deleted = schemas.BoolSchema
            
            
            class memo(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'memo':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def flag_color() -> typing.Type['TransactionFlagColor']:
                return TransactionFlagColor
        
            @staticmethod
            def flag_name() -> typing.Type['TransactionFlagName']:
                return TransactionFlagName
            
            
            class payee_id(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payee_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class category_id(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class transfer_account_id(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transfer_account_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class transfer_transaction_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transfer_transaction_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class matched_transaction_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'matched_transaction_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class import_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'import_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class import_payee_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'import_payee_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class import_payee_name_original(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'import_payee_name_original':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class debt_transaction_type(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "payment": "PAYMENT",
                        "refund": "REFUND",
                        "fee": "FEE",
                        "interest": "INTEREST",
                        "escrow": "ESCROW",
                        "balanceAdjustment": "BALANCE_ADJUSTMENT",
                        "credit": "CREDIT",
                        "charge": "CHARGE",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def PAYMENT(cls):
                    return cls("payment")
                
                @schemas.classproperty
                def REFUND(cls):
                    return cls("refund")
                
                @schemas.classproperty
                def FEE(cls):
                    return cls("fee")
                
                @schemas.classproperty
                def INTEREST(cls):
                    return cls("interest")
                
                @schemas.classproperty
                def ESCROW(cls):
                    return cls("escrow")
                
                @schemas.classproperty
                def BALANCE_ADJUSTMENT(cls):
                    return cls("balanceAdjustment")
                
                @schemas.classproperty
                def CREDIT(cls):
                    return cls("credit")
                
                @schemas.classproperty
                def CHARGE(cls):
                    return cls("charge")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'debt_transaction_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "date": date,
                "amount": amount,
                "cleared": cleared,
                "approved": approved,
                "account_id": account_id,
                "deleted": deleted,
                "memo": memo,
                "flag_color": flag_color,
                "flag_name": flag_name,
                "payee_id": payee_id,
                "category_id": category_id,
                "transfer_account_id": transfer_account_id,
                "transfer_transaction_id": transfer_transaction_id,
                "matched_transaction_id": matched_transaction_id,
                "import_id": import_id,
                "import_payee_name": import_payee_name,
                "import_payee_name_original": import_payee_name_original,
                "debt_transaction_type": debt_transaction_type,
            }
    
    date: MetaOapg.properties.date
    amount: MetaOapg.properties.amount
    approved: MetaOapg.properties.approved
    account_id: MetaOapg.properties.account_id
    deleted: MetaOapg.properties.deleted
    id: MetaOapg.properties.id
    cleared: 'TransactionClearedStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cleared"]) -> 'TransactionClearedStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved"]) -> MetaOapg.properties.approved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag_color"]) -> 'TransactionFlagColor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag_name"]) -> 'TransactionFlagName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payee_id"]) -> MetaOapg.properties.payee_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transfer_account_id"]) -> MetaOapg.properties.transfer_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transfer_transaction_id"]) -> MetaOapg.properties.transfer_transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matched_transaction_id"]) -> MetaOapg.properties.matched_transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["import_id"]) -> MetaOapg.properties.import_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["import_payee_name"]) -> MetaOapg.properties.import_payee_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["import_payee_name_original"]) -> MetaOapg.properties.import_payee_name_original: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["debt_transaction_type"]) -> MetaOapg.properties.debt_transaction_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "date", "amount", "cleared", "approved", "account_id", "deleted", "memo", "flag_color", "flag_name", "payee_id", "category_id", "transfer_account_id", "transfer_transaction_id", "matched_transaction_id", "import_id", "import_payee_name", "import_payee_name_original", "debt_transaction_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cleared"]) -> 'TransactionClearedStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved"]) -> MetaOapg.properties.approved: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag_color"]) -> typing.Union['TransactionFlagColor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag_name"]) -> typing.Union['TransactionFlagName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payee_id"]) -> typing.Union[MetaOapg.properties.payee_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> typing.Union[MetaOapg.properties.category_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transfer_account_id"]) -> typing.Union[MetaOapg.properties.transfer_account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transfer_transaction_id"]) -> typing.Union[MetaOapg.properties.transfer_transaction_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matched_transaction_id"]) -> typing.Union[MetaOapg.properties.matched_transaction_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["import_id"]) -> typing.Union[MetaOapg.properties.import_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["import_payee_name"]) -> typing.Union[MetaOapg.properties.import_payee_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["import_payee_name_original"]) -> typing.Union[MetaOapg.properties.import_payee_name_original, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["debt_transaction_type"]) -> typing.Union[MetaOapg.properties.debt_transaction_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "date", "amount", "cleared", "approved", "account_id", "deleted", "memo", "flag_color", "flag_name", "payee_id", "category_id", "transfer_account_id", "transfer_transaction_id", "matched_transaction_id", "import_id", "import_payee_name", "import_payee_name_original", "debt_transaction_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        approved: typing.Union[MetaOapg.properties.approved, bool, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, uuid.UUID, ],
        deleted: typing.Union[MetaOapg.properties.deleted, bool, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        cleared: 'TransactionClearedStatus',
        memo: typing.Union[MetaOapg.properties.memo, None, str, schemas.Unset] = schemas.unset,
        flag_color: typing.Union['TransactionFlagColor', schemas.Unset] = schemas.unset,
        flag_name: typing.Union['TransactionFlagName', schemas.Unset] = schemas.unset,
        payee_id: typing.Union[MetaOapg.properties.payee_id, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        category_id: typing.Union[MetaOapg.properties.category_id, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        transfer_account_id: typing.Union[MetaOapg.properties.transfer_account_id, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        transfer_transaction_id: typing.Union[MetaOapg.properties.transfer_transaction_id, None, str, schemas.Unset] = schemas.unset,
        matched_transaction_id: typing.Union[MetaOapg.properties.matched_transaction_id, None, str, schemas.Unset] = schemas.unset,
        import_id: typing.Union[MetaOapg.properties.import_id, None, str, schemas.Unset] = schemas.unset,
        import_payee_name: typing.Union[MetaOapg.properties.import_payee_name, None, str, schemas.Unset] = schemas.unset,
        import_payee_name_original: typing.Union[MetaOapg.properties.import_payee_name_original, None, str, schemas.Unset] = schemas.unset,
        debt_transaction_type: typing.Union[MetaOapg.properties.debt_transaction_type, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionSummary':
        return super().__new__(
            cls,
            *args,
            date=date,
            amount=amount,
            approved=approved,
            account_id=account_id,
            deleted=deleted,
            id=id,
            cleared=cleared,
            memo=memo,
            flag_color=flag_color,
            flag_name=flag_name,
            payee_id=payee_id,
            category_id=category_id,
            transfer_account_id=transfer_account_id,
            transfer_transaction_id=transfer_transaction_id,
            matched_transaction_id=matched_transaction_id,
            import_id=import_id,
            import_payee_name=import_payee_name,
            import_payee_name_original=import_payee_name_original,
            debt_transaction_type=debt_transaction_type,
            _configuration=_configuration,
            **kwargs,
        )

from ynab_python_sdk.model.transaction_cleared_status import TransactionClearedStatus
from ynab_python_sdk.model.transaction_flag_color import TransactionFlagColor
from ynab_python_sdk.model.transaction_flag_name import TransactionFlagName
