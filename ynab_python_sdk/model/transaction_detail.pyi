# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

    The version of the OpenAPI document: 1.68.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ynab_python_sdk import schemas  # noqa: F401


class TransactionDetail(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "account_name",
                    "subtransactions",
                }
                
                class properties:
                    account_name = schemas.StrSchema
                    
                    
                    class payee_name(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'payee_name':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class category_name(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'category_name':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class subtransactions(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['SubTransaction']:
                                return SubTransaction
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['SubTransaction'], typing.List['SubTransaction']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'subtransactions':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'SubTransaction':
                            return super().__getitem__(i)
                    __annotations__ = {
                        "account_name": account_name,
                        "payee_name": payee_name,
                        "category_name": category_name,
                        "subtransactions": subtransactions,
                    }
            
            account_name: MetaOapg.properties.account_name
            subtransactions: MetaOapg.properties.subtransactions
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["account_name"]) -> MetaOapg.properties.account_name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["payee_name"]) -> MetaOapg.properties.payee_name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["category_name"]) -> MetaOapg.properties.category_name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["subtransactions"]) -> MetaOapg.properties.subtransactions: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_name", "payee_name", "category_name", "subtransactions", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["account_name"]) -> MetaOapg.properties.account_name: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["payee_name"]) -> typing.Union[MetaOapg.properties.payee_name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["category_name"]) -> typing.Union[MetaOapg.properties.category_name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["subtransactions"]) -> MetaOapg.properties.subtransactions: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_name", "payee_name", "category_name", "subtransactions", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                account_name: typing.Union[MetaOapg.properties.account_name, str, ],
                subtransactions: typing.Union[MetaOapg.properties.subtransactions, list, tuple, ],
                payee_name: typing.Union[MetaOapg.properties.payee_name, None, str, schemas.Unset] = schemas.unset,
                category_name: typing.Union[MetaOapg.properties.category_name, None, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    account_name=account_name,
                    subtransactions=subtransactions,
                    payee_name=payee_name,
                    category_name=category_name,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                TransactionSummary,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionDetail':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from ynab_python_sdk.model.sub_transaction import SubTransaction
from ynab_python_sdk.model.transaction_summary import TransactionSummary
