# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

    The version of the OpenAPI document: 1.68.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ynab_python_sdk import schemas  # noqa: F401


class CurrencyFormat(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
    """


    class MetaOapg:
        required = {
            "decimal_separator",
            "group_separator",
            "currency_symbol",
            "symbol_first",
            "decimal_digits",
            "display_symbol",
            "iso_code",
            "example_format",
        }
        
        class properties:
            iso_code = schemas.StrSchema
            example_format = schemas.StrSchema
            decimal_digits = schemas.Int32Schema
            decimal_separator = schemas.StrSchema
            symbol_first = schemas.BoolSchema
            group_separator = schemas.StrSchema
            currency_symbol = schemas.StrSchema
            display_symbol = schemas.BoolSchema
            __annotations__ = {
                "iso_code": iso_code,
                "example_format": example_format,
                "decimal_digits": decimal_digits,
                "decimal_separator": decimal_separator,
                "symbol_first": symbol_first,
                "group_separator": group_separator,
                "currency_symbol": currency_symbol,
                "display_symbol": display_symbol,
            }

    
    decimal_separator: MetaOapg.properties.decimal_separator
    group_separator: MetaOapg.properties.group_separator
    currency_symbol: MetaOapg.properties.currency_symbol
    symbol_first: MetaOapg.properties.symbol_first
    decimal_digits: MetaOapg.properties.decimal_digits
    display_symbol: MetaOapg.properties.display_symbol
    iso_code: MetaOapg.properties.iso_code
    example_format: MetaOapg.properties.example_format
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_code"]) -> MetaOapg.properties.iso_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["example_format"]) -> MetaOapg.properties.example_format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decimal_digits"]) -> MetaOapg.properties.decimal_digits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decimal_separator"]) -> MetaOapg.properties.decimal_separator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol_first"]) -> MetaOapg.properties.symbol_first: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_separator"]) -> MetaOapg.properties.group_separator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_symbol"]) -> MetaOapg.properties.currency_symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_symbol"]) -> MetaOapg.properties.display_symbol: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["iso_code", "example_format", "decimal_digits", "decimal_separator", "symbol_first", "group_separator", "currency_symbol", "display_symbol", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_code"]) -> MetaOapg.properties.iso_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["example_format"]) -> MetaOapg.properties.example_format: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decimal_digits"]) -> MetaOapg.properties.decimal_digits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decimal_separator"]) -> MetaOapg.properties.decimal_separator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol_first"]) -> MetaOapg.properties.symbol_first: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_separator"]) -> MetaOapg.properties.group_separator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_symbol"]) -> MetaOapg.properties.currency_symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_symbol"]) -> MetaOapg.properties.display_symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["iso_code", "example_format", "decimal_digits", "decimal_separator", "symbol_first", "group_separator", "currency_symbol", "display_symbol", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CurrencyFormat':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
