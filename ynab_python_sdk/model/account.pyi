# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

    The version of the OpenAPI document: 1.68.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ynab_python_sdk import schemas  # noqa: F401


class Account(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "uncleared_balance",
            "deleted",
            "balance",
            "cleared_balance",
            "name",
            "transfer_payee_id",
            "closed",
            "id",
            "type",
            "on_budget",
        }
        
        class properties:
            id = schemas.UUIDSchema
            name = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['AccountType']:
                return AccountType
            on_budget = schemas.BoolSchema
            closed = schemas.BoolSchema
            balance = schemas.Int64Schema
            cleared_balance = schemas.Int64Schema
            uncleared_balance = schemas.Int64Schema
            
            
            class transfer_payee_id(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transfer_payee_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            deleted = schemas.BoolSchema
            
            
            class note(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'note':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            direct_import_linked = schemas.BoolSchema
            direct_import_in_error = schemas.BoolSchema
            
            
            class last_reconciled_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_reconciled_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class debt_original_balance(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'debt_original_balance':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def debt_interest_rates() -> typing.Type['LoanAccountPeriodicValue']:
                return LoanAccountPeriodicValue
        
            @staticmethod
            def debt_minimum_payments() -> typing.Type['LoanAccountPeriodicValue']:
                return LoanAccountPeriodicValue
        
            @staticmethod
            def debt_escrow_amounts() -> typing.Type['LoanAccountPeriodicValue']:
                return LoanAccountPeriodicValue
            __annotations__ = {
                "id": id,
                "name": name,
                "type": type,
                "on_budget": on_budget,
                "closed": closed,
                "balance": balance,
                "cleared_balance": cleared_balance,
                "uncleared_balance": uncleared_balance,
                "transfer_payee_id": transfer_payee_id,
                "deleted": deleted,
                "note": note,
                "direct_import_linked": direct_import_linked,
                "direct_import_in_error": direct_import_in_error,
                "last_reconciled_at": last_reconciled_at,
                "debt_original_balance": debt_original_balance,
                "debt_interest_rates": debt_interest_rates,
                "debt_minimum_payments": debt_minimum_payments,
                "debt_escrow_amounts": debt_escrow_amounts,
            }
    
    uncleared_balance: MetaOapg.properties.uncleared_balance
    deleted: MetaOapg.properties.deleted
    balance: MetaOapg.properties.balance
    cleared_balance: MetaOapg.properties.cleared_balance
    name: MetaOapg.properties.name
    transfer_payee_id: MetaOapg.properties.transfer_payee_id
    closed: MetaOapg.properties.closed
    id: MetaOapg.properties.id
    type: 'AccountType'
    on_budget: MetaOapg.properties.on_budget
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'AccountType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["on_budget"]) -> MetaOapg.properties.on_budget: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed"]) -> MetaOapg.properties.closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cleared_balance"]) -> MetaOapg.properties.cleared_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uncleared_balance"]) -> MetaOapg.properties.uncleared_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transfer_payee_id"]) -> MetaOapg.properties.transfer_payee_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direct_import_linked"]) -> MetaOapg.properties.direct_import_linked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direct_import_in_error"]) -> MetaOapg.properties.direct_import_in_error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_reconciled_at"]) -> MetaOapg.properties.last_reconciled_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["debt_original_balance"]) -> MetaOapg.properties.debt_original_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["debt_interest_rates"]) -> 'LoanAccountPeriodicValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["debt_minimum_payments"]) -> 'LoanAccountPeriodicValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["debt_escrow_amounts"]) -> 'LoanAccountPeriodicValue': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "type", "on_budget", "closed", "balance", "cleared_balance", "uncleared_balance", "transfer_payee_id", "deleted", "note", "direct_import_linked", "direct_import_in_error", "last_reconciled_at", "debt_original_balance", "debt_interest_rates", "debt_minimum_payments", "debt_escrow_amounts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'AccountType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["on_budget"]) -> MetaOapg.properties.on_budget: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed"]) -> MetaOapg.properties.closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cleared_balance"]) -> MetaOapg.properties.cleared_balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uncleared_balance"]) -> MetaOapg.properties.uncleared_balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transfer_payee_id"]) -> MetaOapg.properties.transfer_payee_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direct_import_linked"]) -> typing.Union[MetaOapg.properties.direct_import_linked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direct_import_in_error"]) -> typing.Union[MetaOapg.properties.direct_import_in_error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_reconciled_at"]) -> typing.Union[MetaOapg.properties.last_reconciled_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["debt_original_balance"]) -> typing.Union[MetaOapg.properties.debt_original_balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["debt_interest_rates"]) -> typing.Union['LoanAccountPeriodicValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["debt_minimum_payments"]) -> typing.Union['LoanAccountPeriodicValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["debt_escrow_amounts"]) -> typing.Union['LoanAccountPeriodicValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "type", "on_budget", "closed", "balance", "cleared_balance", "uncleared_balance", "transfer_payee_id", "deleted", "note", "direct_import_linked", "direct_import_in_error", "last_reconciled_at", "debt_original_balance", "debt_interest_rates", "debt_minimum_payments", "debt_escrow_amounts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        uncleared_balance: typing.Union[MetaOapg.properties.uncleared_balance, decimal.Decimal, int, ],
        deleted: typing.Union[MetaOapg.properties.deleted, bool, ],
        balance: typing.Union[MetaOapg.properties.balance, decimal.Decimal, int, ],
        cleared_balance: typing.Union[MetaOapg.properties.cleared_balance, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        transfer_payee_id: typing.Union[MetaOapg.properties.transfer_payee_id, None, str, uuid.UUID, ],
        closed: typing.Union[MetaOapg.properties.closed, bool, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        type: 'AccountType',
        on_budget: typing.Union[MetaOapg.properties.on_budget, bool, ],
        note: typing.Union[MetaOapg.properties.note, None, str, schemas.Unset] = schemas.unset,
        direct_import_linked: typing.Union[MetaOapg.properties.direct_import_linked, bool, schemas.Unset] = schemas.unset,
        direct_import_in_error: typing.Union[MetaOapg.properties.direct_import_in_error, bool, schemas.Unset] = schemas.unset,
        last_reconciled_at: typing.Union[MetaOapg.properties.last_reconciled_at, None, str, datetime, schemas.Unset] = schemas.unset,
        debt_original_balance: typing.Union[MetaOapg.properties.debt_original_balance, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        debt_interest_rates: typing.Union['LoanAccountPeriodicValue', schemas.Unset] = schemas.unset,
        debt_minimum_payments: typing.Union['LoanAccountPeriodicValue', schemas.Unset] = schemas.unset,
        debt_escrow_amounts: typing.Union['LoanAccountPeriodicValue', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Account':
        return super().__new__(
            cls,
            *args,
            uncleared_balance=uncleared_balance,
            deleted=deleted,
            balance=balance,
            cleared_balance=cleared_balance,
            name=name,
            transfer_payee_id=transfer_payee_id,
            closed=closed,
            id=id,
            type=type,
            on_budget=on_budget,
            note=note,
            direct_import_linked=direct_import_linked,
            direct_import_in_error=direct_import_in_error,
            last_reconciled_at=last_reconciled_at,
            debt_original_balance=debt_original_balance,
            debt_interest_rates=debt_interest_rates,
            debt_minimum_payments=debt_minimum_payments,
            debt_escrow_amounts=debt_escrow_amounts,
            _configuration=_configuration,
            **kwargs,
        )

from ynab_python_sdk.model.account_type import AccountType
from ynab_python_sdk.model.loan_account_periodic_value import LoanAccountPeriodicValue
