# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com

    The version of the OpenAPI document: 1.68.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from ynab_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from ynab_python_sdk.api_response import AsyncGeneratorResponse
from ynab_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ynab_python_sdk import schemas  # noqa: F401

from ynab_python_sdk.model.save_transactions_response import SaveTransactionsResponse as SaveTransactionsResponseSchema
from ynab_python_sdk.model.post_transactions_wrapper import PostTransactionsWrapper as PostTransactionsWrapperSchema
from ynab_python_sdk.model.new_transaction import NewTransaction as NewTransactionSchema
from ynab_python_sdk.model.error_response import ErrorResponse as ErrorResponseSchema

from ynab_python_sdk.type.post_transactions_wrapper import PostTransactionsWrapper
from ynab_python_sdk.type.save_transactions_response import SaveTransactionsResponse
from ynab_python_sdk.type.new_transaction import NewTransaction
from ynab_python_sdk.type.error_response import ErrorResponse

from ...api_client import Dictionary
from ynab_python_sdk.pydantic.post_transactions_wrapper import PostTransactionsWrapper as PostTransactionsWrapperPydantic
from ynab_python_sdk.pydantic.new_transaction import NewTransaction as NewTransactionPydantic
from ynab_python_sdk.pydantic.error_response import ErrorResponse as ErrorResponsePydantic
from ynab_python_sdk.pydantic.save_transactions_response import SaveTransactionsResponse as SaveTransactionsResponsePydantic

from . import path

# Path params
BudgetIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'budget_id': typing.Union[BudgetIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_budget_id = api_client.PathParameter(
    name="budget_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=BudgetIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = PostTransactionsWrapperSchema


request_body_data = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'bearer',
]
SchemaFor201ResponseBodyApplicationJson = SaveTransactionsResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: SaveTransactionsResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: SaveTransactionsResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = ErrorResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: ErrorResponse


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: ErrorResponse


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor409ResponseBodyApplicationJson = ErrorResponseSchema


@dataclass
class ApiResponseFor409(api_client.ApiResponse):
    body: ErrorResponse


@dataclass
class ApiResponseFor409Async(api_client.AsyncApiResponse):
    body: ErrorResponse


_response_for_409 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor409,
    response_cls_async=ApiResponseFor409Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor409ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '201': _response_for_201,
    '400': _response_for_400,
    '409': _response_for_409,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _create_single_or_multiple_mapped_args(
        self,
        budget_id: str,
        transaction: typing.Optional[NewTransaction] = None,
        transactions: typing.Optional[typing.List[NewTransaction]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if transaction is not None:
            _body["transaction"] = transaction
        if transactions is not None:
            _body["transactions"] = transactions
        args.body = _body
        if budget_id is not None:
            _path_params["budget_id"] = budget_id
        args.path = _path_params
        return args

    async def _acreate_single_or_multiple_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create a single transaction or multiple transactions
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_budget_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/budgets/{budget_id}/transactions',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_data.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_single_or_multiple_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create a single transaction or multiple transactions
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_budget_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/budgets/{budget_id}/transactions',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_data.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateSingleOrMultipleRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_single_or_multiple(
        self,
        budget_id: str,
        transaction: typing.Optional[NewTransaction] = None,
        transactions: typing.Optional[typing.List[NewTransaction]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_single_or_multiple_mapped_args(
            budget_id=budget_id,
            transaction=transaction,
            transactions=transactions,
        )
        return await self._acreate_single_or_multiple_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def create_single_or_multiple(
        self,
        budget_id: str,
        transaction: typing.Optional[NewTransaction] = None,
        transactions: typing.Optional[typing.List[NewTransaction]] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_single_or_multiple_mapped_args(
            budget_id=budget_id,
            transaction=transaction,
            transactions=transactions,
        )
        return self._create_single_or_multiple_oapg(
            body=args.body,
            path_params=args.path,
        )

class CreateSingleOrMultiple(BaseApi):

    async def acreate_single_or_multiple(
        self,
        budget_id: str,
        transaction: typing.Optional[NewTransaction] = None,
        transactions: typing.Optional[typing.List[NewTransaction]] = None,
        validate: bool = False,
        **kwargs,
    ) -> SaveTransactionsResponsePydantic:
        raw_response = await self.raw.acreate_single_or_multiple(
            budget_id=budget_id,
            transaction=transaction,
            transactions=transactions,
            **kwargs,
        )
        if validate:
            return SaveTransactionsResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(SaveTransactionsResponsePydantic, raw_response.body)
    
    
    def create_single_or_multiple(
        self,
        budget_id: str,
        transaction: typing.Optional[NewTransaction] = None,
        transactions: typing.Optional[typing.List[NewTransaction]] = None,
        validate: bool = False,
    ) -> SaveTransactionsResponsePydantic:
        raw_response = self.raw.create_single_or_multiple(
            budget_id=budget_id,
            transaction=transaction,
            transactions=transactions,
        )
        if validate:
            return SaveTransactionsResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(SaveTransactionsResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        budget_id: str,
        transaction: typing.Optional[NewTransaction] = None,
        transactions: typing.Optional[typing.List[NewTransaction]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_single_or_multiple_mapped_args(
            budget_id=budget_id,
            transaction=transaction,
            transactions=transactions,
        )
        return await self._acreate_single_or_multiple_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        budget_id: str,
        transaction: typing.Optional[NewTransaction] = None,
        transactions: typing.Optional[typing.List[NewTransaction]] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_single_or_multiple_mapped_args(
            budget_id=budget_id,
            transaction=transaction,
            transactions=transactions,
        )
        return self._create_single_or_multiple_oapg(
            body=args.body,
            path_params=args.path,
        )

